############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                        Families                          #
#                                                          #
#               ---------------------------                #
#                                                          #
# | Families are a collection of servers. To register      #
# | new servers into a family, you need to configure       #
# | your sub-servers appropriately.                        #
#                                                          #
# | If your sub-servers use family names that don't match  #
# | what you define here, they will not be registered.     #
#                                                          #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
#
# The root family. Once a player connects and is validated.
# This is the family that they will automatically be routed to.
#
# The root family MUST point to a scalar family!
#
root-family:
    #
    # The scalar family, or versioned family, to use as the root.
    # The root family is not allowed to have a parent family.
    #
    name: "lobby"

    #
    # If a player is kicked or disconnected from a family in this proxy.
    # Should the root family catch them? If not, they will disconnect from the whole network.
    # This setting is great if you want a player to join back into the lobby if they get kicked from
    # a gamemode or sub-family.
    #
    catch-disconnecting-players: false

############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                      Scalar Family                       #
#                                                          #
#               ---------------------------                #
#                                                          #
# | Scalar families are optimized for stateless            #
# | minecraft gamemodes.                                   #
#                                                          #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
scalar:
    - "lobby" # the default lobby family

############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                      Static Family                       #
#                                                          #
#               ---------------------------                #
#                                                          #
# | Static families are optimized for stateful             #
# | minecraft gamemodes.                                   #
#                                                          #
# | When players join a static family, their initial       #
# | server will be memorized, and they'll be connected     #
# | back into that server on future family connections     #
# | as well.                                               #
#                                                          #
# | This initial server is called the player's residence.  #
#                                                          #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
static: []

############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                      Ranked Family                       #
#                                                          #
#               ---------------------------                #
#                                                          #
# | Ranked families implement matchmaking algorithms to    #
# | pair players together into "player stacks" which then  #
# | load into a specific server.                           #
# | When a player attempts to connect to a ranked family   #
# | they will remain in their current family until         #
# | matchmaking is finished and the entire player stack    #
# | is then connected to a server in the family.           #
#                                                          #
# | Once a server is in-session it will automatically      #
# | be locked and new sessions won't be able to join       #
# | until the server is unlocked.                          #
#                                                          #
# | Ranked families can't be used as parent families.      #
#                                                          #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
ranked: []


############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                     Versioned Family                     #
#                                                          #
#               ---------------------------                #
#                                                          #
# | Versioned families are fake families.                  #
# | They don't actually exist.                             #
#                                                          #
# | A versioned family does not allow servers to be        #
# | registered to it.                                      #
# | Instead, you register other families to it. Then,      #
# | when players connect to the versioned family, they     #
# | will be connected to one of the sub families based     #
# | on the version of Minecraft they are using.            #
#                                                          #
# | Versioned families are not allowed to have the same    #
# | name as a regular family.                              #
#                                                          #
# | All target families used by a versioned families       #
# | must be of the same type.                              #
#                                                          #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
versioned-families: []
## This is an example versioned family.
## Versioned families are not allowed to use other versioned families as a target.
## `target-family` must point to an already existing family.
## You can also use sub versions such as 1.20.2.
##
##    - name: "lobby"
##      mappings:
##          - versions: 1.8, 1.9, 1.10, 1.11, 1.12
##            target-family: "lobby-legacy"
##          - versions: 1.13, 1.14, 1.15, 1.16, 1.17
##            target-family: "lobby-old"
##          - versions: 1.18, 1.19, 1.20
##            target-family: "lobby-modern"