#############################################################
#|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                      Dynamic Scale                        #
#                                                           #
#               ----------------------------                #
#                                                           #
# | Autoscalers hook directly into your Kubernetes instance #
# | to allow your families to dynamically resize the number #
# | of servers they use to handle different                 #
# | influxes of players.                                    #
#                                                           #
# | If you assign the same autoscaler to multiple families  #
# | They will all follow the rules of that one autoscaler.  #
#                                                           #
#               ----------------------------                #
#                                                           #
#|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#############################################################
#
# Saturation is defined as the ratio of player count to available player slots (soft-cap)
# Target saturation defines the target ratio that the Dynamic Scaling algorithm should aim for.
#
# The further away from the target, the more aggressively the auto-scaling algorithm will
# generate or degenerate MCLoaders.
#
target-saturation: 0.8



#
# Sometimes all the MCLoaders in the family has player on them.
# This value lets you define if MCLoaders are allowed to be degenerated even if players are online.
#
degenerate-active-mcloaders: false



#
# The Elastic algorithm accounts for the player limits (soft-cap) of your MCLoaders
#