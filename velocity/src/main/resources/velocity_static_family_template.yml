############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                      Static Family                       #
#                                                          #
#               ---------------------------                #
# | Families are a collection of servers. To register      #
# | new servers into a family, you need to configure       #
# | your sub-servers appropriately.                        #
#                                                          #
# | If your sub-servers use family names that don't match  #
# | what you define in config.yml, they will               #
# | not be registered.                                     #
#                                                          #
# | In this config you can manage this family's            #
# | load-balancing, whitelist, and more!                   #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################

############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                     First Connection                     #
#                                                          #
#               ---------------------------                #
# | When players first connect to a static family, they    #
# | will be routed to the best server based on the         #
# | family's load balancing algorithm (just like scalar    #
# | families.)                                             #
#                                                          #
# | Once the player is routed to the proper server,        #
# | that server will be linked to that player and anytime  #
# | the player joins the family in the future, they'll     #
# | be connected to that specific server.                  #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
first-connection:
############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                      Load Balancing                      #
#                                                          #
#               ---------------------------                #
# | Load balancing is the system through which networks    #
# | manage player influxes by spreading out players        #
# | across various server nodes.                           #
#                                                          #
# | In static families, load balancing only effects the    #
# | first time a player connects to the family.            #
# | Once the player connects for the first time, the       #
# | server they connected to will be remembered and        #
# | they'll be joined to that server on                    #
# | consecutive connections in the future too.             #
#                                                          #
# | The server that get's linked to a player is called     #
# | that player's "Home Server".                           #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
    load-balancing:

#
# If set to `true`. the load balancer will attempt to put players into the servers with the highest `weight`
# `weight` is defined in the individual server configs on RustyConnector-paper.
#
# If multiple server are set to be the same weight level, the load balancer will use `algorithm` on those servers
# until they have been filled. It will then step to the next, lower, weight level and continue.
#
        weighted: false
############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                        Algorithm                         #
#                                                          #
#               ---------------------------                #
# | Depending on your needs, you might want to balance     #
# | player influxes in various ways.                       #
# | RustyConnector currently supports the following.       #
# | balancing algorithms if there are other algorithms     #
# | you'd like to see in the future, let us know!          #
#                                                          #
#  ⚫ LEAST_CONNECTION -                                   #
#             Connects players to the server with the      #
#             the fewest players currently connected.      #
#             This mode is best if you want evenly         #
#             distributed players across all servers.      #
#  ⚫ MOST_CONNECTION -                                     #
#             Connects players to the server with the      #
#             the most players currently connected.        #
#             This mode is best if you want to fill        #
#             servers up as quickly as possible. An        #
#             example would be a minigame server.          #
#  ⚫ ROUND_ROBIN -                                        #
#             Every time a connection occurs, the next     #
#             server in the load balancer will be queued   #
#             for the next connection.                     #
#             Once the load balancer reaches the end of    #
#             the server queue, the load balancer will     #
#             loop back to the beginning and start again.  #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
        algorithm: ROUND_ROBIN


############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                       Persistence                        #
#                                                          #
#               ---------------------------                #
# | Persistence defines whether or not the load balancer   #
# | should give up if it's first attempt to connect a      #
# | player to this family fails.                           #
# | If this is off, the player will have to manually       #
# | try again if the attempt fails.                        #
# | If this is on, the load balancer will keep trying      #
# | until it's number of attempts has exceeded `attempts`  #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
        persistence:
            enabled: false

#
# This is how many times the load balancer will attempt to connect a player to this family before giving up.
# If you have lots of servers in this family with whitelists, it might be better to increase this value.
#
# Set to -1 for the family to never give up. (In most cases this isn't really the best idea)
#
            attempts: 5


############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                 Consecutive Connections                  #
#                                                          #
#               ---------------------------                #
# | When a player connects to the family again after       #
# | already connecting at least once, they'll be routed    #
# | Directly to their home server if it's available.       #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
consecutive-connections:

############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#            If The Home Server is Unavailable             #
#                                                          #
#               ---------------------------                #
# | If the home server is unavailable, what should happen  #
# | to the player?                                         #
#                                                          #
#  ⚫ CANCEL_CONNECTION_ATTEMPT -                          #
#             Stop the player from connecting to this      #
#             family. Tell them that their server is       #
#             unavailable and that they should try again   #
#             later.                                       #
#  ⚫ ASSIGN_NEW_HOME -                                    #
#             Connect the player to the load balancer and  #
#             give them a new home server.                 #
#             This option does not display an error to     #
#             the player.                                  #
#  ⚫ CONNECT_WITH_ERROR -                                 #
#             Connect the player to a random server in     #
#             the family (in accordance with the load      #
#             balancing algorithm) and inform them that    #
#             their home server was unavailable.           #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
    home-server:
        if-unavailable: CANCEL_CONNECTION_ATTEMPT

############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                        Expiration                        #
#                                                          #
#               ---------------------------                #
# | Set whether a player's home server should expire       #
# | after a certain amount of time.                        #
# | Set to "NEVER" if you don't want a player's home       #
# | server to ever expire.                                 #
# | Otherwise, set it as a number of months,               #
# | days, or hours.                                        #
#                                                          #
#   The time formats don't care if you:                    #
#       - Use shorthand versions ("d" instead of "day")    #
#       - Use plurals ("Day" versus "Days")                #
#       - Use caps ("day" versus "DAY")                    #
#       - Use whitespaces ("1d" versus "1 d")              #
#               ---------------------------                #
#                         Examples                         #
#                                                          #
#       "30 Months" - To expire after 30 months.           #
#       "2d" - To expire after 2 days.                     #
#       "1 hour" - To expire after 1 hour.                 #
#                                                          #
#               ---------------------------                #
#                           NOTE                           #
#       If you activate expiration (changing it from       #
#       `NEVER` to an actual value.)                       #
#       Any already existing home servers which were       #
#       originally set as `NEVER` will be updated to       #
#       expire at `expiration` amount of time from now.    #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
        expiration: NEVER

whitelist:
############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                        Whitelist                         #
#                                                          #
#               ---------------------------                #
# | RustyConnector attempts to be as flexible as possible  #
# | when configuring whitelists!                           #
# | To setup a whitelist, you'll need to navigate to the   #
# | "whitelists" folder and follow the directions in the   #
# | provided whitelist-template.                           #
#                                                          #
# | More often than not, you will have multiple whitelist  #
# | configurations that you may want to switch between     #
# | during various points in your network's lifetime.      #
# | This system allows you to set up as many pre-defined   #
# | whitelists as you'd like, and enable or switch between #
# | then whenever you want!                                #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
    enabled: false

#
# The name of the whitelist configuration file in your "whitelists" folder.
# You can include the ".yml" at the end of the name below if you'd like. It doesn't matter either way.
#
    name: "whitelist-template"

tpa:
############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                           TPA                            #
#                                                          #
#               ---------------------------                #
# | Should players inside this family be able to tpa       #
# | to each other across servers?                          #
# | If player1 is in one server and player2 is in another  #
# | server; player1 will connect to the new server and     #
# | then teleport to player2's coordinates.                #
#                                                          #
# | If both players are in the same server, player1 will   #
# | just automatically teleport to player1.                #
#                                                          #
#   NOTE: This command is player facing!                   #
#                                                          #
#               ----------------------------               #
#                        Permission:                       #
#                rustyconnector.command.tpa                #
#               ----------------------------               #
#                          Usage:                          #
#              /tpa <target players username>              #
#               ----------------------------               #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
    enabled: false

#
# Should the tpa consider player caps before attempting to teleport?
# If false, the player must match the player caps of the server they
# are attempting to connect to.
#
    ignore-player-cap: false

#
# How many minutes a pending tpa request can exist for before it expires.
# Players are not allowed to issue new tpa requests if they already have one pending.
#
# If a player's tpa request is accepted or denied before it expires, they will
# be able to issue a new tpa request immediately.
# Otherwise, they must wait for their current request to expire before issuing a new one.
#
# Players will receive a notification in-chat once their request expires.
#
# `request-lifetime` is in minutes.
#
    request-lifetime: 5