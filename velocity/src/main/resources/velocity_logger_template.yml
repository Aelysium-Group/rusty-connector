############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                         Logger                           #
#                                                          #
#               ---------------------------                #
# | In order to operate, RustyConnector passes lots of     #
# | data around. In this file, you can control what does   #
# | and does not appear in your console when               #
# | something happens!                                     #
#                                                          #
# | One of our biggest pet peeves is plugins that default  #
# | with everything turned on, and then you have to spend  #
# | hours to turn it all off. Because of this, everything  #
# | in this config is off by default except for            #
# | certain important messages,                            #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
#
# Generally speaking trashed messages are thrown away because they have an
# invalid private key or because they were sent by the proxy.
#
# You can usually set this to `false` so that only messages that are from other servers are saved.
#
save-trashed-messages: true

messaging:
# Should we log when a server requests to be registered?
# NOTE: This option can spam your proxy console if your proxy sends out a call-for-registration
#       which requires all listening servers to submit a registration request
    registration-request: false

# Should we log when a server requests to be unregistered?
    unregistration-request: false

# Should we log when the proxy calls for all servers to register themselves?
    call-for-registration: false

# Should we log when the proxy makes a ping request to servers?
    ping: false

# Should we log when the proxy receives a ping response from a server? (Also called a `pong`)
    pong: false

# Should we log anytime the message parser throws away a message? (Can generate lots of console spam on busy servers!)
    message-parser-trash: false

security:
# Should we log when a message fails message tunnel validation?
    message-tunnel-failed-message: true

log:
# Log what we do when a player joins the server
    player-join: false

# Log what happens when a player leaves the server
    player-leave: false

    # Log what happens when a player moves between servers
    player-move: false

    # Log anytime a family re-balances it's server priorities
    family-balancing: false

console-icons:
############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                      Console Icons                       #
#                                                          #
#               ---------------------------                #
# | Any system developer will tell you that watching       #
# | logs can sometimes feel messy and overwhelming.        #
# | Sometimes, this is because there are just to many      #
# | things you have to read in such short amounts of time  #
#                                                          #
# | To address this issue. We've implemented something     #
# | we're calling Console Icons. These are short           #
# | combinations of characters meant to convey a meaning.  #
# | It's a known fact that the human eye recognizes shapes #
# | faster than it can process words. So we wanted to      #
# | take advantage of that ability.                        #
#                                                          #
# | If you find that it's not your style, you are welcome  #
# | to replace the icons below with your own worded        #
# | versions! Or you can adjust them in a way that helps   #
# | you interpret them faster and better!                  #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################

#
#   Symbol used when a server is requesting the proxy to register it into a family.
#   Example: [server name](127.0.0.1:25565) ?>>>? family-name
#
    requesting-registration: "?>>>?"

#
#   Symbol used when a server gets registered into a family
#   Example: [server name](127.0.0.1:25565) >>>>> family-name
#
    registered: ">>>>>"

#
#   Symbol used when the proxy asks all servers to register themselves
#   Example: (Velocity)[127.0.0.1] |>~=- ALL SERVERS
#
    call-for-registration: "|>~=-"

#
#   Symbol used when a server requests to be unregistered from a family
#   Example: [server name](127.0.0.1:25565) ?///? family-name
#
    requesting-unregistration: "?///?"

#
#   Symbol used when a server gets unregistered from a family
#   Example: [server name](127.0.0.1:25565) ///// family-name
#
    unregistered: "/////"

#
#   Symbol used when a previous request gets canceled as a result of an error
#   Example: [server name](127.0.0.1:25565) xxxxx family-name
#
    canceled-request: "xxxxx"

    #
    #   Symbol used when a family is balancing its servers
    #   Example: family-name /---\
    #
    family-balancing: "▲▼▲▼▲"

    #
    #   Symbol used when the proxy pings a server
    #   Example: Proxy |>>>> [family name] [server name](127.0.0.1:25565)
    #
    ping: "|>>>>"

    #
    #   Symbol used when a server responds to a ping
    #   Example: Proxy <<<<| [family name] [server name](127.0.0.1:25565)
    #
    pong: "<<<<|"